/*
一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。

现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？

网格中的障碍物和空位置分别用 1 和 0 来表示。

说明：m 和 n 的值均不超过 100。

*/

/*
1、首先dp 毫无问题
2、其次是如果是左侧有了障碍物，则左侧的次数都不会累计到右侧，只有上测的部分会累计过来（想明白这点写dp）
3、判断是否是有障碍物，如果有障碍物则设置为0，否则dp[i][j] = dp[i-1][j]+dp[i][j-1]，不是取两者的最小值
4、需要初始化第一行和第一列的数据
*/

class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        if len(obstacleGrid) == 0 or not obstacleGrid:
            return 0
            
        m = len(obstacleGrid) #行
        n = len(obstacleGrid[0]) #列

        if m==0 or n==0:
            return 0
        
        index_tab = [[0 for i in range(n)] for j in range(m)]

        for i in range(m):
            if obstacleGrid[i][0]==1:
                break
            index_tab[i][0] = 1
            
        for i in range(n):
            if obstacleGrid[0][i]==1:
                break
            index_tab[0][i] = 1

        for i in range(1,m):
            for j in range(1,n):
                if obstacleGrid[i][j]==0:
                    index_tab[i][j] = index_tab[i-1][j]+index_tab[i][j-1]

        return index_tab[-1][-1]
